% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modules_grammar_hpc.R
\name{test_differential_abundance-HPCell-method}
\alias{test_differential_abundance-HPCell-method}
\title{Test Differential Abundance for HPCell}
\usage{
\S4method{test_differential_abundance}{HPCell}(
  .data,
  .formula,
  .sample = NULL,
  .transcript = NULL,
  .abundance = NULL,
  contrasts = NULL,
  method = "edgeR_quasi_likelihood",
  test_above_log2_fold_change = NULL,
  scaling_method = "TMM",
  omit_contrast_in_colnames = FALSE,
  prefix = "",
  action = "add",
  factor_of_interest = NULL,
  target_input = "pseudobulk_se",
  target_output = "de",
  group_by_column = NULL,
  ...,
  significance_threshold = NULL,
  fill_missing_values = NULL,
  .contrasts = NULL
)
}
\arguments{
\item{.data}{An HPCell object.}

\item{.formula}{A formula used to model the design matrix.}

\item{.sample}{Sample parameter.}

\item{.transcript}{Transcript parameter.}

\item{.abundance}{Abundance parameter.}

\item{contrasts}{Contrasts parameter.}

\item{method}{Method parameter, default is "edgeR_quasi_likelihood".}

\item{test_above_log2_fold_change}{Test above log2 fold change.}

\item{scaling_method}{Scaling method, default is "TMM".}

\item{omit_contrast_in_colnames}{Omit contrast in column names.}

\item{prefix}{Prefix parameter.}

\item{action}{Action parameter, default is "add".}

\item{...}{Additional parameters.}

\item{significance_threshold}{Significance threshold.}

\item{fill_missing_values}{Fill missing values.}

\item{.contrasts}{Contrasts parameter.}
}
\value{
The result of the differential abundance test.
}
\description{
This function tests differential abundance for HPCell objects.
}
\details{
`r lifecycle::badge("maturing")`

This function provides the option to use edgeR \url{https://doi.org/10.1093/bioinformatics/btp616}, limma-voom \url{https://doi.org/10.1186/gb-2014-15-2-r29}, limma_voom_sample_weights \url{https://doi.org/10.1093/nar/gkv412} or  DESeq2 \url{https://doi.org/10.1186/s13059-014-0550-8} to perform the testing.
All methods use raw counts, irrespective of if scale_abundance or adjust_abundance have been calculated, therefore it is essential to add covariates such as batch effects (if applicable) in the formula.

Underlying method for edgeR framework:

	.data |>

	# Filter
keep_abundant(
		factor_of_interest = !!(as.symbol(parse_formula(.formula)[1])),
		minimum_counts = minimum_counts,
		minimum_proportion = minimum_proportion
	) |>

		# Format
		select(!!.transcript,!!.sample,!!.abundance) |>
		spread(!!.sample,!!.abundance) |>
		as_matrix(rownames = !!.transcript) %>%

		# edgeR
		edgeR::DGEList(counts = .) |>
		edgeR::calcNormFactors(method = scaling_method) |>
		edgeR::estimateDisp(design) |>

		# Fit
		edgeR::glmQLFit(design) |> // or glmFit according to choice
		edgeR::glmQLFTest(coef = 2, contrast = my_contrasts) // or glmLRT according to choice



Underlying method for DESeq2 framework:

keep_abundant(
		factor_of_interest = !!as.symbol(parse_formula(.formula)[[1]]),
		minimum_counts = minimum_counts,
		minimum_proportion = minimum_proportion
) |>

# DESeq2
DESeq2::DESeqDataSet(design = .formula) |>
DESeq2::DESeq() |>
DESeq2::results()



Underlying method for glmmSeq framework:

counts =
.data %>%
  assay(my_assay)

# Create design matrix for dispersion, removing random effects
design =
  model.matrix(
    object = .formula |> lme4::nobars(),
    data = metadata
  )

dispersion = counts |> edgeR::estimateDisp(design = design) %$% tagwise.dispersion |> setNames(rownames(counts))

  glmmSeq( .formula,
           countdata = counts ,
           metadata =   metadata |> as.data.frame(),
           dispersion = dispersion,
           progress = TRUE,
           method = method |> str_remove("(?i)^glmmSeq_" ),
  )
}
\examples{
# edgeR

 tidybulk::se_mini |>
 identify_abundant() |>
	test_differential_abundance( ~ condition )

	# The function `test_differential_abundance` operates with contrasts too

 tidybulk::se_mini |>
 identify_abundant(factor_of_interest = condition) |>
 test_differential_abundance(
	    ~ 0 + condition,
	    contrasts = c( "conditionTRUE - conditionFALSE")
 )

 # DESeq2 - equivalent for limma-voom

my_se_mini = tidybulk::se_mini
my_se_mini$condition  = factor(my_se_mini$condition)

# demontrating with `fitType` that you can access any arguments to DESeq()
my_se_mini  |>
   identify_abundant(factor_of_interest = condition) |>
       test_differential_abundance( ~ condition, method="deseq2", fitType="local")

# testing above a log2 threshold, passes along value to lfcThreshold of results()
res <- my_se_mini  |>
   identify_abundant(factor_of_interest = condition) |>
        test_differential_abundance( ~ condition, method="deseq2",
            fitType="local",
            test_above_log2_fold_change=4 )

# Use random intercept and random effect models

 se_mini[1:50,] |>
  identify_abundant(factor_of_interest = condition) |>
  test_differential_abundance(
    ~ condition + (1 + condition | time),
    method = "glmmseq_lme4", cores = 1
  )

# confirm that lfcThreshold was used
\dontrun{
    res |>
        mcols() |>
        DESeq2::DESeqResults() |>
        DESeq2::plotMA()
}

# The function `test_differential_abundance` operates with contrasts too

 my_se_mini |>
 identify_abundant() |>
 test_differential_abundance(
	    ~ 0 + condition,
	    contrasts = list(c("condition", "TRUE", "FALSE")),
	    method="deseq2",
         fitType="local"
 )
}
